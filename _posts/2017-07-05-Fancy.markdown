---
layout:     post
title:      "Fancy That"
subtitle:   "Email Analysis"
date:       2017-07-05 16:20:00
author:     "Chris"
header-img: "img/Fancy/fancy.jpg"
---


I've been tasked with reviewing the network traffic and two emails from Roger Finster's compromised computer. However, only one of the emails had actually infected Finster's computer. 

To start, I'll have a look at each email to try and gather some background information on the incident.


![Figure One](/img/Fancy/email.jpg)


<b>Email 1:</b>

Thu, 18 May 2017 15:48:34<br>
assistant@foxdifferlaw.com

- Email seems personalized for Finster
- Hyper link to suspicious domain (Possible IOC)
(http://pardintworeb.ru/viewdoc/file.php?document=MjQwN3JvZ2VyLmZpbnN0ZXJAZmluc3RlcnMtZmluZS1qZXdlbHJ5LmNvbTg1NzE=)

<b>Email 2:</b>

Thu, 18 May 2017 17:55:00<br>
amwxihya607@how-to-grow-facial-hair-fast.com

- Suspicious sender email
- Attached PDF (Possible IOC)
- Claims to be a FedEx Employee, yet no official FedEx domain


After a quick overview of both emails, I can see two possible IOC's on Finster's PC. We'll dive into with the PCAP file to gather more information. 

To start off, I want to get an idea of what information was transferred over the network. While scrolling through the PCAP file may give me an idea, using WireShark's powerful analytic tools can speed up our investigation. Since the PCAP file is pretty massive, I want an idea of who was talking to Finster's PC. Using the Conversations statistic tool, I arrange the column by bytes to see where the majority of traffic was sent/received. The first and third conversations appear to be normal traffic, however the second largest conversation does not. Why?

![Figure two](/img/Fancy/convo.PNG)

- The resolved domain address looks fishy..
- The sketchy domain sends far more bytes to Finster's PC than he responds with, pointing to a possible file download
- There's a large amount of information sent over a short duration (7.2 seconds)

For more information on the domain (regereeeeee.com), a quick Google search revealed that it is in-fact a malicious website. With this information, there's reason to believe that file transferred is malicious. I tried to export HTTP objects via WireShark, however I couldn't make sense of the file broken up. Instead, I followed the TCP stream which gave me the file in it's entirety.

![Figure Three](/img/Fancy/tcpstream.PNG)

After saving the stream, I was confident that searching the file's MD5 hash I'd get more information/clues. Unfortunately, the file appears to be encrypted as I couldn't locate any traces of it online. While I've definitely found an artifact in the network capture that I'll hang onto, I still haven't figured out which of the two emails led to the compromise of Finster's PC.

Back to the first email... I noted earlier that the domain looked suspicious, so I popped it into Google and some malicious indicators came back, but I couldn't find anything concrete. I don't have a sandbox set up capable of visiting this website on my own physical/virtual machines. I used several tools found here(https://rationallyparanoid.com/articles/examine-suspicious-website.html) to  gain more knowledge of this domain, but nothing concrete came back to me. On top of that, WireShark string searches did not yield any results. Moving on...

The second email contains a PDF, which is much easier to examine locally. To extract the PDF from the EML (email) file, I ran a terminal tool called munpack (apt-get install mpack). 

![Figure Four](/img/Fancy/mpack.PNG)

Great! The PDF has been extracted and I can begin examination. Since I'm working in a sandbox environment, I'm okay to open the PDF normally. <i>(This is something I would never do on my personal/work machine).</i> On the other hand, I could've opened this program up with various tools located in the REMnux distro. 

![Figure Five](/img/Fancy/pdf.PNG)

Interesting; the PDF file points to a Word Document embedded inside of it. I simply saved the info_delivery.doc file to my directory and decided to be a bit more careful this time. One tool I found useful to examine documents is OfficeScanner.py. This tool isn't included in the SIFT Toolkit, however it's a simple script so copy the raw code and ensure it can be executed (chmod a+x officeparser.py). I decided to use the "--extract-macros" option due to the high likely-hood that I'm dealing with a malicious word document with embedded macros.

![Figure Six](/img/Fancy/command.PNG)

I examined both files that OfficeParser had spit out: Module_1.bas had no relevant information but This_Document.cls is full of it. While my reverse engineering skills are weak, I can tell that no normal Word document has this Visual Basic code embedded in it. 

![Figure Eight](/img/Fancy/macros.PNG)

I decided to search online to understand what's going on in this possibly malicious code. Using the md5sum utility against the document, I checked VirusTotal and found the document online. 

![Figure Seven](/img/Fancy/virustotal.PNG)

There weren't a ton of hits at first, so I resubmitted the document and as seen above, a 35/58 detection ratio is a solid indicator that the document is malicious. In the comment section, another user had submitted the document to Payload-Security several weeks earlier. This analysis(https://www.hybrid-analysis.com/sample/17870a9de6649c9c44ad0ae0d9ffefb4b2f4a4a6f2b70ff79ea2fcc26d60b0ad?environmentId=100) has a massive amount of information that dives into depth on the inner-gears of the file. While scrolling through, one component I noticed was that the malicious code makes HTTP GET requests to the domain (regereeeeee.com) that I had noticed earlier! 

A big thanks to Brad at Malware-Traffic-Analysis for setting up this exercise and allowing me to train my skills. Go ahead and check out his website for many other network forensic challenges, some of which I will attempt over the next few weeks. 

